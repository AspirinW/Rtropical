use_git()
library(devtools)
use_git()
use_github()
library(roxygen2)
setwd("./Rtropical")
document()
use_github()
use_gpl3_license()
usethis::use_git()
usethis::use_github()
library(Rtropical)
use_github()
use_github()
use_github()
use_gpl3_license(name = "Rtropial")
devtools::build_readme()
install.packages("rlang")
install.packages("rlang")
devtools::build_readme()
file.exists("~/.ssh/id_rsa.pub")
use_github()
library(devtools)
use_git()
use_github()
use_git()
library(devtools)
use_git()
use_github()
setwd("/Users/wanghoujie/Documents/GitHub/Rtropical")
document()
library(Rtropical)
usethis::use_package("ape")
usethis::use_package("lpSolve")
document()
library(devtools)
document()
library(Rtropical)
read.nexus.to.data.matrix("/Users/wanghoujie/Downloads/Research/Tropical/All Tree Data/genetree_S1_r1.dat", "/Users/wanghoujie/Downloads/Research/Tropical/All Tree Data/genetree_S1_r2.dat")
load_all()
library(Rtropical)
read.nexus.to.data.matrix("/Users/wanghoujie/Downloads/Research/Tropical/All Tree Data/genetree_S1_r1.dat", "/Users/wanghoujie/Downloads/Research/Tropical/All Tree Data/genetree_S1_r2.dat")
library(devtools)
?cophenetic
library(Rtropical)
library(Rtropical)
93*1.065*6.6/225
93*1.08*6.6/225
225*3*93*1.08*6.6/225
225*3*93*1.08*6.6/225+190
(225*3*93*1.08*6.6/225+190)/225
(225*3*93*1.08*6.6/225+190)/(225*3)
140*6.6*0.25
sample(c("Buy", "Don't Buy"), 1)
sample(c("Buy", "Don't Buy"), 1)
sample(1:4, 16, replace = T)
library(pracma)
randperm(1: 4, 16)
randperm(1: 4, 4)
rep(randperm(1: 4, 4), 4)
sapply(1: 4, randperm(1: 4, 4))
sapply(1: 4, function(x){randperm(1: 4, 4)})
matrix(sapply(1: 4, function(x){randperm(1: 4, 4)}))
?do.call
do.call("cbind", matrix(sapply(1: 4, function(x){randperm(1: 4, 4)})))
cbind(matrix(sapply(1: 4, function(x){randperm(1: 4, 4)})),
matrix(sapply(1: 4, function(x){randperm(1: 4, 4)})),
matrix(sapply(1: 4, function(x){randperm(1: 4, 4)})),
matrix(sapply(1: 4, function(x){randperm(1: 4, 4)})))
design_scheme = cbind(matrix(sapply(1: 4, function(x){randperm(1: 4, 4)})),
matrix(sapply(1: 4, function(x){randperm(1: 4, 4)})),
matrix(sapply(1: 4, function(x){randperm(1: 4, 4)})),
matrix(sapply(1: 4, function(x){randperm(1: 4, 4)})))
letters
colnames(design_scheme) = paste("Position ", letters[4], sep = "")
paste("Position ", letters[4], sep = "")
colnames(design_scheme) = paste("Position ", letters[1:4], sep = "")
design_scheme
rownames(design_scheme) = paste("Box", 1: 16, sep = "")
design_scheme
randperm(1: 4, 4)
factorial(4)
expand.grid(LETTERS[1:4], 1:4)
expand.grid(paste("pos", LETTERS[1:4], sep = ""), paste(brands", 1:4, sep = ""))
paste("pos", LETTERS[1:4], sep = "")
expand.grid(paste("pos", LETTERS[1:4], sep = ""), paste("brands", 1:4, sep = ""))
expand.grid(paste("pos", LETTERS[1:4], sep = ""), paste("brand1", 1:4, sep = ""))
expand.grid(paste("pos", LETTERS[1:4], sep = ""), paste("brand", 1:4, sep = ""))
library(Rtropical)
library(Rtropical)
library(Rtropical)
?root
chronotrees <- lapply(trees_root, chronos)
library(ape)
chronotrees <- lapply(trees_root, chronos)
trees
library(Rtropical)
requireNamespace("parallel")
requireNamespace("gtools")
library(Rtropical)
library(Rtropical)
usethis::use_package("parallel")
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
# Now we create two catogories of trees
tree_set1 <- list()
for (i in 1: 100){
tree_set1[[i]] = rcoal(5)
}
class(tree_set1) <- "multiPhylo"
tree_set2 <- list()
for (i in 1: 100){
tree_set2[[i]] = rcoal(5)
}
class(tree_set2) <- "multiPhylo"
N <- 100
tree_set1 <- list()
for (i in 1: N){
tree_set1[[i]] <- rcoal(5)
}
class(tree_set1) <- "multiPhylo"
tree_set2 <- list()
for (i in 1: N){
tree_set2[[i]] <- rcoal(5)
}
class(tree_set2) <- "multiPhylo"
write.nexus(tree_set1, file = "tree_set1.nex")
write.nexus(tree_set2, file = "tree_set2.nex")
?write.nexus
read.nexus.to.data.matrix("tree_set1.nex", "tree_set2.nex")
library(Rtropical)
read.nexus.to.data.matrix("tree_set1.nex", "tree_set2.nex")
write.nexus(tree_set1, file = "tree_set1.nex")
write.nexus(tree_set2, file = "tree_set2.nex")
tree_set_mat <- read.nexus.to.data.matrix("tree_set1.nex", "tree_set2.nex")
write.tree(tree_set1, file = "tree_set1.txt")
write.tree(tree_set2, file = "tree_set2.txt")
tree_set2
sum(tree_set_mat - tree_set_mat2)
tree_set_mat2 <- read.tree.to.data.matrix("tree_set1.nex", "tree_set2.nex")
write.tree(tree_set1, file = "tree_set1.txt")
write.tree(tree_set2, file = "tree_set2.txt")
tree_set_mat2 <- read.tree.to.data.matrix("tree_set1.txt", "tree_set2.txt")
sum(tree_set_mat - tree_set_mat2)
tree_set_mat[1, ]
tree_set_mat2[1, ]
tree_set_mat != tree_set_mat2
library(Rtropical)
tree_set_mat <- read.nexus.to.data.matrix("tree_set1.nex", "tree_set2.nex")
tree_set_mat2 <- read.tree.to.data.matrix("tree_set1.txt", "tree_set2.txt")
tree_set_mat2
tree_set_mat
tree_set_mat2
tree_set_mat2 <- read.tree.to.data.matrix("tree_set1.txt", "tree_set2.txt")
tree_set_mat2
N <- 100
tree_set1 <- list()
for (i in 1: N) tree_set1[[i]] <- rcoal(5)
class(tree_set1) <- "multiPhylo"
tree_set1
tree_set_mat <- read.nexus.to.data.matrix("tree_set1.nex", "tree_set2.nex")
head(tree_set_mat)
N <- 100
tree_set1 <- list()
for (i in 1: N) tree_set1[[i]] <- rcoal(5)
class(tree_set1) <- "multiPhylo"
tree_set2 <- list()
for (i in 1: N) tree_set2[[i]] <- rcoal(5)
class(tree_set2) <- "multiPhylo"
N <- 3
tree_set1 <- list()
for (i in 1: N) tree_set1[[i]] <- rcoal(5)
class(tree_set1) <- "multiPhylo"
tree_set2 <- list()
for (i in 1: N) tree_set2[[i]] <- rcoal(5)
class(tree_set2) <- "multiPhylo"
write.nexus(tree_set1, file = "tree_set1.nex")
write.nexus(tree_set2, file = "tree_set2.nex")
tree_set_mat <- read.nexus.to.data.matrix("tree_set1.nex", "tree_set2.nex")
head(tree_set_mat)
write.tree(tree_set1, file = "tree_set1.txt")
write.tree(tree_set2, file = "tree_set2.txt")
tree_set_mat2 <- read.tree.to.data.matrix("tree_set1.txt", "tree_set2.txt")
tree_set_mat != tree_set_mat2
tree_set_mat2
tree_set1
head(tree_set_mat)
tree_set_mat
data.file1 = "tree_set1.nex"
data.file2 = "tree_set2.nex"
# data.file1 = "tree_set1.nex"
# data.file2 = "tree_set2.nex"
G1 <- read.nexus(data.file1)
G2 <- read.nexus(data.file2)
n <- length(G1[[1]]$tip.label)
to <- G1[[1]]$tip.label
N1 <- length(G1)
N2 <- length(G2)
N1
N2
distVec_all1 <- multiPhylo.to.data.matrix(G1, to)
distVec_all2 <- multiPhylo.to.data.matrix(G2, to)
rownames(distVec_all1) <- NULL
rownames(distVec_all2) <- NULL
class1 <- rep(1, N1)
class2 <- rep(2, N2)
D_all1 <- cbind(class1, distVec_all1)
D_all2 <- cbind(class2, distVec_all2)
D_all1
D_all2
D <- rbind(D_all1, D_all2)
D
read.nexus.to.data.matrix2 <- function(data.file1, data.file2){
# data.file1 = "tree_set1.nex"
# data.file2 = "tree_set2.nex"
G1 <- read.nexus(data.file1)
G2 <- read.nexus(data.file2)
n <- length(G1[[1]]$tip.label)
to <- G1[[1]]$tip.label
N1 <- length(G1)
N2 <- length(G2)
distVec_all1 <- multiPhylo.to.data.matrix(G1, to)
distVec_all2 <- multiPhylo.to.data.matrix(G2, to)
rownames(distVec_all1) <- NULL
rownames(distVec_all2) <- NULL
class1 <- rep(1, N1)
class2 <- rep(2, N2)
D_all1 <- cbind(class1, distVec_all1)
D_all2 <- cbind(class2, distVec_all2)
D <- rbind(D_all1, D_all2)
return(D)
}
read.nexus.to.data.matrix2("tree_set1.nex", "tree_set2.nex")
?read.nexus.to.data.matrix
read.nexus.to.data.matrix
read.nexus.to.data.matrix("tree_set1.nex", "tree_set2.nex")
library(Rtropical)
N <- 3
tree_set1 <- list()
for (i in 1: N) tree_set1[[i]] <- rcoal(5)
class(tree_set1) <- "multiPhylo"
tree_set2 <- list()
for (i in 1: N) tree_set2[[i]] <- rcoal(5)
class(tree_set2) <- "multiPhylo"
write.nexus(tree_set1, file = "tree_set1.nex")
write.nexus(tree_set2, file = "tree_set2.nex")
tree_set_mat <- read.nexus.to.data.matrix("tree_set1.nex", "tree_set2.nex")
head(tree_set_mat)
library(Rtropical)
tree_set_mat <- read.nexus.to.data.matrix("tree_set1.nex", "tree_set2.nex")
tree_set_mat
as.factor(rep(2, N2))
(1834.78+88*6.58)/(225*2*3)
library(mvtnorm)
N = 5000
pi_ab = function(parm){
a = parm[1]; b = parm[2]
b^(-0.9)*exp(-(a+b))*(b^a/factorial(a-1))^n*prod(factorial(a+y-1)/((t+b)^(a+y)))
}
ab_0 = c(1, 1)
samples = matrix(0, nrow = N, ncol = 2)
for (i in 1:N){
ab_1 = ab_0*exp(rmvnorm(1, mean = rep(0, 2), sigma = diag(2)))
p_log = log(pi_ab(ab_1)) - log(pi_ab(ab_0)) + log(prod(ab_1)) - log(prod(ab_0))
if (log(runif(1)) <= p_log){
ab_0 = ab_1
}
samples[i, ] = ab_0
}
set.seed(100)
n <- 10
y <- c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22)
t <- c(94.3, 15.7, 62.9, 126, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5)
a_pos_b_theta <- function(a, b, theta){
((b^a)/(factorial(a-1)))^n*(prod(theta)^(a-1))*exp(-a)
}
a_sampler = function(a0, b, theta, n){
for (i in 1: n){
a1 = a0*exp(rnorm(1, 0, 1))
p_log = log(a_pos_b_theta(a1, b, theta)) - log(a_pos_b_theta(a0, b, theta)) + log(a1) - log(a0)
if (log(runif(1)) <= p_log){
a0 = a1
}
}
return(a0)
}
# Gibbs Sampling
N = 5000
a = 1
b = 1
theta = rep(1, n)
samples = matrix(0, nrow = N, ncol = 2+n)
for (i in 1: N){
a = a_sampler(a, b, theta, 100)
b = rgamma(1, shape = (n*a+0.1), rate = (sum(theta)+1))
theta = sapply(1:n, function(i){rgamma(1, shape = a+y[i], rate = b+t[i])})
samples[i, ] = c(a, b, theta)
}
hist(samples[-c(1:500), 1], breaks = 20, xlab = expression(alpha),
main = expression(paste("Histogram of ", alpha, " from Gibbs", sep = "")))
hist(samples[-c(1:500), 2], breaks = 10, xlab = expression(alpha),
main = expression(paste("Histogram of ", beta, " from Gibbs", sep = "")))
plot(samples[-c(1:500), 1], samples[-c(1:500), 2], xlab = expression(alpha), ylab = expression(beta),
main = expression(paste(alpha, " and ", beta, " from Gibbs", sep = "")))
dim(samples)
library(mvtnorm)
N = 5000
pi_ab = function(parm){
a = parm[1]; b = parm[2]
b^(-0.9)*exp(-(a+b))*(b^a/factorial(a-1))^n*prod(factorial(a+y-1)/((t+b)^(a+y)))
}
ab_0 = c(1, 1)
samples = matrix(0, nrow = N, ncol = 2)
for (i in 1:N){
ab_1 = ab_0*exp(rmvnorm(1, mean = rep(0, 2), sigma = diag(2)))
p_log = log(pi_ab(ab_1)) - log(pi_ab(ab_0)) + log(prod(ab_1)) - log(prod(ab_0))
if (log(runif(1)) <= p_log){
ab_0 = ab_1
}
samples[i, ] = ab_0
}
hist(samples[-c(1:500), 1], breaks = 20, xlab = expression(alpha),
main = expression(paste("Histogram of ", alpha,
" based on p(", alpha, ",", beta, "|y)", sep = "")))
hist(samples[-c(1:500), 2], breaks = 10, xlab = expression(beta),
main = expression(paste("Histogram of ", beta,
" based on p(", alpha, ",", beta, "|y)", sep = "")))
plot(samples[-c(1:500), ],
xlab = expression(alpha), ylab = expression(beta),
main = expression(paste("Plot of ", alpha, " and ", beta,
" based on p(", alpha, ",", beta, "|y)", sep = "")))
# ab_sampler = function(a, b, sample_a, nn){
#   if (sample_a){
#     a0 = 1
#     for (j in 1: nn){
#       a1 = a0*exp(rnorm(1, 0, 1))
#       p_log = log(pi_ab(c(a1, b))) - log(pi_ab(c(a0, b))) + log(a1) - log(a0)
#       if (log(runif(1)) <= p_log){
#         a0 = a1
#       }
#     }
#     return(a0)
#   } else{
#     b0 = 1
#     for (j in 1: nn){
#       b1 = b0*exp(rnorm(1, 0, 1))
#       p_log = log(pi_ab(c(a, b1))) - log(pi_ab(c(a, b0))) + log(b1) - log(b0)
#       if (log(runif(1)) <= p_log){
#         b0 = b1
#       }
#     }
#     return(b0)
#   }
# }
# samples = matrix(0, nrow = N+1, ncol = 2)
# samples[1, ] = c(1, 1)
# for (i in 1: N){
#   samples[(i+1), 1] = ab_sampler(samples[i, 1], samples[i, 2], sample_a = TRUE, 100)
#   samples[(i+1), 2] = ab_sampler(samples[(i+1), 1], samples[i, 2], sample_a = FALSE, 100)
# }
dim(samples)
